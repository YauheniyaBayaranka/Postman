{
	"info": {
		"_postman_id": "89ed9526-093e-49d7-8855-2c12a7591356",
		"name": "HW_2 Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12232947"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"///1. Отправить запрос.\r",
							"///2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () { \r",
							"pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"///3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body matches string\", function () {\r",
							"pm.expect(pm.response.text()).to.include(\"This is the first responce from server!ss\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () { \r",
							"pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"let resp = pm.response.json();\r",
							"let resp_name = resp.name;\r",
							"let resp_age = +resp.age;\r",
							"let resp_salary = resp.salary;\r",
							"\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Check name\", function () {\r",
							"pm.expect(resp_name).to.eql('Eva');\r",
							"});    \r",
							"\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Check age\", function () {\r",
							"pm.expect(resp_age).to.eql(28);\r",
							"});\r",
							"\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Check salary\", function () {\r",
							"pm.expect(resp_salary).to.eql(1500);\r",
							"});\r",
							"\r",
							"//7. Спарсить request.\r",
							"let req = request.data;\r",
							"let req_name = req.name;\r",
							"let req_age = +req.age;\r",
							"let req_salary = +req.salary;\r",
							"let req_salary_1_5 = req_salary * 4;\r",
							"\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check request name\", function () {\r",
							"pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check request age\", function () {\r",
							"pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Check request salary\", function () {\r",
							"pm.expect(resp.salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"console.log(resp.family);\r",
							"\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"Check request u_salary_1_5_year\", function () {\r",
							" pm.expect(resp.family.u_salary_1_5_year).to.eql(req_salary_1_5);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Eva",
							"type": "text"
						},
						{
							"key": "age",
							"value": "28",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 500\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"//4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject();\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							" pm.test(\"check name\", function(){\r",
							"      pm.expect(req.name).to.eql(jsonData.name);\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"check age\", function(){\r",
							"    pm.expect(jsonData.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"check salary\", function(){\r",
							"    pm.expect(jsonData.salary).to.eql(+req.salary);\r",
							"    });\r",
							"\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family);\r",
							"\r",
							"//9.Проверить, что у параметра dog есть параметры name\r",
							"pm.test( \"check dog_name\", function(){\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");\r",
							" });\r",
							"\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test( \"check dog_age \", function(){\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\");\r",
							"    }); \r",
							"\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"check name_Luky\", function(){\r",
							"     pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");\r",
							"     });\r",
							"\r",
							" //12. Проверить, что параметр age имеет значение 4\r",
							"pm.test( \"check age_4\", function(){\r",
							"pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Eva&age=28&salary=1300",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Eva"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "1300"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							" //2. Получить статус код 200\r",
							"pm.test(\"Status code is 200\", function () { \r",
							"pm.response.to.have.status(200);\r",
							"});\r",
							"\t\t\t\t\r",
							"//3. Спарсить response body в json\r",
							"let jsonData = pm.response.json()\r",
							"\r",
							"//let response_parsing = pm.response.json();\r",
							"//console.log(\"response_parsing\", response_parsing);\r",
							"\t\t\t\t\t\t\t\r",
							"//4. Спарсить request.\\r\",\r",
							"let req = pm.request.url.query.toObject()\r",
							"\r",
							"//let request_parsing = pm.request.url.query.all();\r",
							"//console.log(\"request_parsing\", request_parsing);\r",
							"\t\t\t\t\t\t\t\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"check name\", function(){\r",
							"    pm.expect(req.name).to.eql(jsonData.name)\r",
							"    });\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.),\r",
							"pm.test(\"check age\", function(){\r",
							"pm.expect(jsonData.age).to.eql(+req.age)\r",
							"});\r",
							"\r",
							"//7. Вывести в консоль параметр salary из request\r",
							"console.log(req.salary)\r",
							"\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"console.log(jsonData.salary)\r",
							"\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(jsonData.salary[0])\r",
							"      \t\t\t\t\t\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[1])\r",
							"\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response\r",
							"console.log(jsonData.salary[2])   \r",
							"\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"check salary response equals salary req\", function(){\r",
							" pm.expect(jsonData.salary[0]).to.eql(+req.salary)\r",
							" });\r",
							"\t\t\t\t\t\t\t\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"check salary response equals salary req*2\", function(){\r",
							"pm.expect(+jsonData.salary[1]).to.eql(req.salary*2)\r",
							"});   \r",
							"\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"check salary response equals salary req*3\", function(){\r",
							"pm.expect(+jsonData.salary[2]).to.eql(req.salary*3)\r",
							"});\r",
							"//18. Передать в окружение переменную name\r",
							"let name = jsonData.name\r",
							"pm.environment.set(\"name\", name)\r",
							"\r",
							"//19. Передать в окружение переменную age\r",
							"let age = jsonData.age\r",
							"pm.environment.set(\"age\", age)\r",
							"\t\t\t\t\t\t\t\r",
							"//20. Передать в окружение переменную salary\r",
							"let salary = jsonData.salary\r",
							"pm.environment.set(\"salary\", salary)\r",
							"\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"salary.forEach(parm => { \r",
							" console.log(parm);\r",
							"})\r",
							"\t\t\t\t\t\t\t\t\t\t\t\t\t"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Eva&age=28&salary=1300",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Eva"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "1300"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос\r",
							"//5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"   });\r",
							"\r",
							"  // 6. Спарсить response body в json.\r",
							"  let response_parsing = pm.response.json();\r",
							"  console.log(\"response_parsing\", response_parsing);\r",
							"\r",
							"  // 7. Спарсить request.\r",
							"  let request_parsing = request.data;\r",
							"  console.log(\"request_parsing\", request_parsing);\r",
							"\r",
							"  // 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"  pm.test(\"start_qa_salary\", function(){\r",
							"      pm.expect(response_parsing).to.have.property(\"start_qa_salary\");\r",
							"      });\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"qa_salary_after_6_months\", function(){\r",
							"pm.expect(response_parsing).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							" // 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							" pm.test(\"qa_salary_after_12_months\", function(){\r",
							"pm.expect(response_parsing).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							" // 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							" pm.test(\"qa_salary_after_1.5_year\", function(){\r",
							"pm.expect(response_parsing).to.have.property(\"qa_salary_after_1.5_year\");\r",
							" });\r",
							"\r",
							" // 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"  pm.test(\"qa_salary_after_3.5_years\", function(){\r",
							"pm.expect(response_parsing).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"   });\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"person\", function(){\r",
							"pm.expect(response_parsing).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary from request\", function(){\r",
							"      pm.expect(response_parsing.start_qa_salary).to.equal(+request_parsing.salary);\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months from request\", function(){\r",
							"    pm.expect(response_parsing.qa_salary_after_6_months).to.equal(+request_parsing.salary*2);\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months from request\", function(){\r",
							"pm.expect(response_parsing.qa_salary_after_12_months).to.equal(+request_parsing.salary*2.7);\r",
							"}); \r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year from request\", function(){   \r",
							"pm.expect(response_parsing[\"qa_salary_after_1.5_year\"]).to.equal(+request_parsing.salary*3.3);\r",
							"}); \r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.\r",
							"pm.test(\"qa_salary_after_3.5_years from request\", function(){\r",
							"    pm.expect(response_parsing[\"qa_salary_after_3.5_years\"]).to.equal(+request_parsing.salary*3.8);\r",
							" }); \r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"u_name\", function(){\r",
							"pm.expect(response_parsing.person.u_name[1]).to.equal(+request_parsing.salary);\r",
							" });\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)  \r",
							"pm.test(\"u_age\", function(){\r",
							" pm.expect(response_parsing.person.u_age).to.equal(+request_parsing.age);\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"u_salary_5_years\", function(){      \r",
							"pm.expect(response_parsing.person.u_salary_5_years).to.equal(+request_parsing.salary*4.2);\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (var a in response_parsing.person.u){\r",
							" console.log('salary','=', response_parsing.person.u[a])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "28",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}